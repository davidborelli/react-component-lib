image: node:12-alpine

stages:
  - install
  - test
  - build
  - release
  - deploy
  - cleanup

variables:
  IMAGE_NAME: atomik-mcontigo-com
  NAMESPACE: web-system
  DOCKER_HOST: 'tcp://docker:2375'
  DOCKER_DRIVER: overlay2


.only-review:
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'develop'
  except:
    refs:
      - master
      - develop

.only-cache:
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - example/node_modules/

.only-cache-pull:
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - example/node_modules/
    policy: pull

install:
  stage: install
  script:
    - init_deps
    - init_ssh
    - npm config set unsafe-perm true
    - npm install
    - npm run example:install
  extends:
    - .only-cache
  only:
    - branches
    - merge_requests

lint:
  stage: test
  before_script: []
  script:
    - npm run lint
  retry: 2
  extends:
    - .only-cache
  only:
    - branches
    - merge_requests

test:
  stage: test
  before_script: []
  script:
    - npm test
  retry: 2
  extends:
    - .only-cache
  only:
    - branches
    - merge_requests

build:
  stage: build
  script:
    - npm run build
    - npm run example:build
    - npm run storybook:build
  artifacts:
    paths:
      - build
      - dist
      - build-storybook
      - example/dist

  extends:
  - .only-cache-pull
  only:
  - master
  - develop
  - merge_requests


review:release:
  stage: release
  image: docker:18.09
  variables:
    GCP_CONTAINER_REGISTRY: $GCP_STAGING_CONTAINER_REGISTRY
    IMAGE: gcr.io/$GKE_STAGING_PROJECT/${IMAGE_NAME}
  services:
    - docker:18.09-dind
  script:
    - init_docker
    - push_docker
  extends:
    - .only-review
    - .only-cache-pull

production:release:
  stage: release
  image: docker:18.09
  variables:
    GCP_CONTAINER_REGISTRY: $GCP_PRODUCTION_CONTAINER_REGISTRY
    IMAGE: gcr.io/$GKE_PRODUCTION_PROJECT/${IMAGE_NAME}
  services:
    - docker:18.09-dind
  script:
    - init_docker
    - push_docker
  only:
    - develop
    - master
  extends:
    - .only-cache-pull

review:deploy:atomik:
  stage: deploy
  image: devth/helm:v2.15.1
  variables:
    PROJECT_NAME: atomik-mcontigo-com-${CI_MERGE_REQUEST_IID}
    IMAGE: gcr.io/$GKE_STAGING_PROJECT/${IMAGE_NAME}:$CI_COMMIT_SHA
    SERVER_PORT: 8080
    NODE_ENV: development
    REPLICA_COUNT: 1
    HOST: ${CI_COMMIT_REF_SLUG}.atomik.review.mcontigo.io
    GATEWAY: istio-system/mcontigo-io-gateway
    COMMAND: example:serve
    PORT_NAME: http-layout
    GKE_SERVICE_ACCOUNT: $GKE_STAGING_SERVICE_ACCOUNT
    GKE_CLUSTER_NAME: $GKE_STAGING_NAME
    GKE_PROJECT: $GKE_STAGING_PROJECT
    GKE_REGION: $GKE_STAGING_REGION
    CI_ENVIRONMENT_NAME: ${CI_COMMIT_REF_SLUG}.atomik.review.mcontigo.io
  script:
    - echo $IMAGE
    - init_helm
    - run_helm
  cache: {}
  extends:
    - .only-review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://${CI_COMMIT_REF_SLUG}.atomik.review.mcontigo.io
    on_stop: review:cleanup:atomik
    auto_stop_in: 1 week

review:deploy:storybook:
  stage: deploy
  image: devth/helm:v2.15.1
  variables:
    PROJECT_NAME: storybook-mcontigo-com-${CI_MERGE_REQUEST_IID}
    IMAGE: gcr.io/$GKE_STAGING_PROJECT/${IMAGE_NAME}:$CI_COMMIT_SHA
    SERVER_PORT: 8080
    NODE_ENV: development
    REPLICA_COUNT: 1
    HOST: ${CI_COMMIT_REF_SLUG}.storybook.review.mcontigo.io
    COMMAND: storybook:serve
    PORT_NAME: http-storybook
    GATEWAY: istio-system/mcontigo-io-gateway
    GKE_SERVICE_ACCOUNT: $GKE_STAGING_SERVICE_ACCOUNT
    GKE_CLUSTER_NAME: $GKE_STAGING_NAME
    GKE_PROJECT: $GKE_STAGING_PROJECT
    GKE_REGION: $GKE_STAGING_REGION
    CI_ENVIRONMENT_NAME: ${CI_COMMIT_REF_SLUG}.storybook.review.mcontigo.io
  script:
    - init_helm
    - run_helm
  cache: {}
  extends:
    - .only-review
  environment:
    name: review/storybook-$CI_COMMIT_REF_NAME
    url: https://${CI_COMMIT_REF_SLUG}.storybook.review.mcontigo.io
    on_stop: review:cleanup:storybook
    auto_stop_in: 1 week

production:deploy:atomik:
  stage: deploy
  image: devth/helm:v2.15.1
  variables:
    PROJECT_NAME: atomik-mcontigo-com
    IMAGE: gcr.io/$GKE_PRODUCTION_PROJECT/${IMAGE_NAME}:$CI_COMMIT_SHA
    SERVER_PORT: 8080
    NODE_ENV: production
    REPLICA_COUNT: 3
    HOST: atomik.layout.mcontigo.io
    COMMAND: example:serve
    PORT_NAME: http-layout
    GATEWAY: istio-system/mcontigo-io-gateway
    GKE_SERVICE_ACCOUNT: $GKE_EUROPE_SERVICE_ACCOUNT
    GKE_CLUSTER_NAME: $GKE_EUROPE_NAME
    GKE_PROJECT: $GKE_PRODUCTION_PROJECT
    GKE_REGION: $GKE_EUROPE_REGION
    CI_ENVIRONMENT_NAME: atomik
  script:
    - init_helm
    - run_helm
  cache: {}
  dependencies: []
  environment:
    name: production/${HOST}
  needs: ["production:release"]
  only:
    - develop
    - master

production:deploy:storybook:
  stage: deploy
  image: devth/helm:v2.15.1
  variables:
    PROJECT_NAME: storybook-mcontigo-com
    IMAGE: gcr.io/$GKE_PRODUCTION_PROJECT/${IMAGE_NAME}:$CI_COMMIT_SHA
    SERVER_PORT: 8080
    NODE_ENV: production
    REPLICA_COUNT: 3
    HOST: atomik.storybook.mcontigo.io
    COMMAND: storybook:serve
    PORT_NAME: http-storybook
    GATEWAY: istio-system/mcontigo-io-gateway
    GKE_SERVICE_ACCOUNT: $GKE_EUROPE_SERVICE_ACCOUNT
    GKE_CLUSTER_NAME: $GKE_EUROPE_NAME
    GKE_PROJECT: $GKE_PRODUCTION_PROJECT
    GKE_REGION: $GKE_EUROPE_REGION
    CI_ENVIRONMENT_NAME: storybook
  script:
    - init_helm
    - run_helm
  cache: {}
  dependencies: []
  environment:
    name: production/${HOST}
  needs: ["production:release"]
  only:
    - develop
    - master

review:cleanup:atomik:
  stage: cleanup
  image: devth/helm:v2.15.1
  variables:
    PROJECT_NAME: atomik-mcontigo-com-${CI_MERGE_REQUEST_IID}
    GKE_SERVICE_ACCOUNT: $GKE_STAGING_SERVICE_ACCOUNT
    GKE_CLUSTER_NAME: $GKE_STAGING_NAME
    GKE_PROJECT: $GKE_STAGING_PROJECT
    GKE_REGION: $GKE_STAGING_REGION
  cache: {}
  script:
    - init_helm
    - helm del --purge ${PROJECT_NAME}
  when: manual
  extends:
    - .only-review
  except:
    refs:
      - master
      - develop
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop

review:cleanup:storybook:
  stage: cleanup
  image: devth/helm:v2.15.1
  variables:
    PROJECT_NAME: storybook-mcontigo-com-${CI_MERGE_REQUEST_IID}
    GKE_SERVICE_ACCOUNT: $GKE_STAGING_SERVICE_ACCOUNT
    GKE_CLUSTER_NAME: $GKE_STAGING_NAME
    GKE_PROJECT: $GKE_STAGING_PROJECT
    GKE_REGION: $GKE_STAGING_REGION
  cache: {}
  script:
    - init_helm
    - helm del --purge ${PROJECT_NAME}
  when: manual
  extends:
    - .only-review
  except:
    refs:
      - master
      - develop
  environment:
    name: review/storybook-$CI_COMMIT_REF_NAME
    action: stop

.functions: &functions |
  #  Loading Gitlab CI custom functions

  # Docker settings
  function init_docker() {
      mkdir -p /etc/deploy
      echo ${GCP_CONTAINER_REGISTRY} | base64 -d > /etc/deploy/sa.json
      docker login -u _json_key -p "$(cat /etc/deploy/sa.json)" https://gcr.io
  }
  function init_deps() {
    apk --update --no-cache add openssh-client bash git autoconf automake bash g++ rsync \
    libc6-compat libjpeg-turbo-dev libpng-dev libtool make python2 nasm vips-dev
  }


  function push_docker() {
      docker pull $IMAGE:latest || true
      docker build \
      --pull \
      -t $IMAGE:$CI_COMMIT_SHA \
      --cache-from $IMAGE:latest \
      --build-arg SSH_GITLAB_PRIVATE_KEY="$SSH_GITLAB_PRIVATE_KEY" \
      -f config/docker/production/Dockerfile \
      .
      docker push $IMAGE:$CI_COMMIT_SHA
  }

  # SSH Settings
  function init_ssh() {
      mkdir -p ~/.ssh
      eval $(ssh-agent -s)
      [[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      echo "$SSH_GITLAB_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  }

  # GCLOUD Settings
  function init_gcloud() {
      mkdir -p /etc/deploy
      echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
      gcloud auth activate-service-account --key-file /etc/deploy/sa.json --project=${GKE_PROJECT}
      gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --region ${GKE_REGION} --project ${GKE_PROJECT}
  }

  # Helm settings
  function init_helm() {
      init_gcloud
      helm init --service-account tiller --wait --client-only
  }

  function run_helm() {
     helm upgrade \
     --install  \
     --set release.name="${PROJECT_NAME}" \
     --set release.image="${IMAGE}" \
     --set release.host="${HOST}" \
     --set release.hostGuide="${HOST_GUIDE}" \
     --set release.serverPort="${SERVER_PORT}" \
     --set release.serverGuidePort="${SERVER_GUIDE_PORT}" \
     --set release.replicaCount="${REPLICA_COUNT}" \
     --set release.namespace="${NAMESPACE}" \
     --set release.nodeEnv="${NODE_ENV}" \
     --set release.portName="${PORT_NAME}" \
     --set release.command="${COMMAND}" \
     --set istio.gateway="${GATEWAY}" \
     --namespace ${NAMESPACE} \
     --wait \
     --force \
     ${PROJECT_NAME} \
     ./config/helm
  }



before_script:
  - *functions
